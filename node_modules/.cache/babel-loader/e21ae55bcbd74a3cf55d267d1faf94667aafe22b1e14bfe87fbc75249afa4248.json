{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jair Konzen\\\\Documents\\\\projects\\\\my-app\\\\src\\\\components\\\\CleaningDay\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Limpeza, MainTittle, DrawContainer, InName, ContainerInputTxt, TxtInp, ContainerButtonAdd, ContentButtonAdd, ListPartic, ContainerButtonSort, SortButton, ContainerList, List, RemoveButton, ScrollableContainerList } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n}\nfunction CleaningDay({\n  onPairsGenerated\n}) {\n  _s();\n  //O motivo de envolver participants e setParticipants entre colchetes é para fazer a atribuição dos valores retornados pela função useState de forma mais compacta e legível\n  const [participants, setParticipants] = useState([]); //useState([]) aqui diz que o estado nao ta definido, mas vai ser, quando setPartipants for definido\n  const [participantName, setParticipantName] = useState(\"\"); //aqui a mesma coisa da linha acima useState(\"\") vai ser definido no setParticipantName\n\n  const handleAddParticipant = () => {\n    if (participantName.trim() !== \"\") {\n      //se participantName estiver armazenado um valor então vai ser desigual à \"undefined\" e isso vai fazer a expressão ser True\n      setParticipants([...participants, participantName]); //Sendo True vai criar um novo array que consiste em todos os elementos do array participants (espalhados usando o operador spread ...) seguidos pelo novo participante participantName.\n      setParticipantName(\"\"); //vai voltar a função com a \"undefined\" para poder inserir um novo nome em setParticipants\n    }\n  };\n  const handleRemoveParticipant = index => {\n    //arrow function que no parâmetro diz o indice do participante que será removido no array\n    const updatedParticipants = [...participants]; //criando uma cópia do array participants usando o operador spread (...)\n    updatedParticipants.splice(index, 1); //remover um elemento do array updatedParticipants,splice() modifica o array original, removendo ou substituindo elementos O segundo parâmetro 1 indica que queremos remover apenas um elemento a partir do índice especificado.\n    setParticipants(updatedParticipants); //atualizando o array depois da modificação.\n  };\n  const handleSortParticipants = () => {\n    if (participants.length < 2) {\n      alert(\"É necessário pelo menos dois participantes para formar duplas\");\n    }\n    const shuffledParticipants = shuffleArray(participants);\n    const newPairs = [];\n    for (let i = 0; i < shuffledParticipants.length; i += 2) {\n      if (i === shuffledParticipants.length - 1) {\n        newPairs.push([shuffledParticipants[i]]);\n      } else {\n        newPairs.push([shuffledParticipants[i], shuffledParticipants[i + 1]]);\n      }\n    }\n    onPairsGenerated(newPairs);\n  };\n  return /*#__PURE__*/_jsxDEV(Limpeza, {\n    children: [/*#__PURE__*/_jsxDEV(MainTittle, {\n      children: \"Calend\\xE1rio de Limpeza\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DrawContainer, {\n      children: [/*#__PURE__*/_jsxDEV(InName, {\n        for: \"nome\",\n        children: \"Insira o nome\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainerInputTxt, {\n        children: /*#__PURE__*/_jsxDEV(TxtInp, {\n          type: \"text\",\n          name: \"name\",\n          id: \"nome\",\n          placeholder: \"Ex.: Brian\",\n          value: participantName,\n          onChange: e => setParticipantName(e.target.value),\n          onKeyDown: e => {\n            if (e.key === 'Enter') {\n              handleAddParticipant();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainerButtonAdd, {\n        children: /*#__PURE__*/_jsxDEV(ContentButtonAdd, {\n          onClick: handleAddParticipant,\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContainerButtonSort, {\n      children: [/*#__PURE__*/_jsxDEV(ListPartic, {\n        children: \"Lista de participantes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SortButton, {\n        onClick: handleSortParticipants,\n        children: \"Sortear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContainerList, {\n      children: /*#__PURE__*/_jsxDEV(ScrollableContainerList, {\n        children: participants.map((participant, index) => /*#__PURE__*/_jsxDEV(List, {\n          children: [participant, /*#__PURE__*/_jsxDEV(RemoveButton, {\n            onClick: () => handleRemoveParticipant(index),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(CleaningDay, \"Z8PgFpM0Pty+rnTyGdYfITShRfo=\");\n_c = CleaningDay;\nexport default CleaningDay;\nvar _c;\n$RefreshReg$(_c, \"CleaningDay\");","map":{"version":3,"names":["React","useState","Limpeza","MainTittle","DrawContainer","InName","ContainerInputTxt","TxtInp","ContainerButtonAdd","ContentButtonAdd","ListPartic","ContainerButtonSort","SortButton","ContainerList","List","RemoveButton","ScrollableContainerList","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","CleaningDay","onPairsGenerated","_s","participants","setParticipants","participantName","setParticipantName","handleAddParticipant","trim","handleRemoveParticipant","index","updatedParticipants","splice","handleSortParticipants","alert","shuffledParticipants","newPairs","push","children","fileName","_jsxFileName","lineNumber","columnNumber","for","type","name","id","placeholder","value","onChange","e","target","onKeyDown","key","onClick","map","participant","_c","$RefreshReg$"],"sources":["C:/Users/Jair Konzen/Documents/projects/my-app/src/components/CleaningDay/index.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Limpeza, MainTittle, DrawContainer, InName, ContainerInputTxt,\r\n  TxtInp, ContainerButtonAdd, ContentButtonAdd, ListPartic, ContainerButtonSort,\r\n  SortButton, ContainerList, List, RemoveButton, ScrollableContainerList\r\n} from \"./styles\";\r\n\r\nfunction shuffleArray(array) {\r\n  const shuffledArray = [...array];\r\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n  }\r\n  return shuffledArray;\r\n}\r\n\r\nfunction CleaningDay({ onPairsGenerated }) {\r\n  //O motivo de envolver participants e setParticipants entre colchetes é para fazer a atribuição dos valores retornados pela função useState de forma mais compacta e legível\r\n  const [participants, setParticipants] = useState([]);//useState([]) aqui diz que o estado nao ta definido, mas vai ser, quando setPartipants for definido\r\n  const [participantName, setParticipantName] = useState(\"\");//aqui a mesma coisa da linha acima useState(\"\") vai ser definido no setParticipantName\r\n\r\n  const handleAddParticipant = () => {\r\n    if (participantName.trim() !== \"\") {//se participantName estiver armazenado um valor então vai ser desigual à \"undefined\" e isso vai fazer a expressão ser True\r\n      setParticipants([...participants, participantName]);//Sendo True vai criar um novo array que consiste em todos os elementos do array participants (espalhados usando o operador spread ...) seguidos pelo novo participante participantName.\r\n      setParticipantName(\"\");//vai voltar a função com a \"undefined\" para poder inserir um novo nome em setParticipants\r\n    }\r\n  };\r\n\r\n  const handleRemoveParticipant = (index) => {//arrow function que no parâmetro diz o indice do participante que será removido no array\r\n    const updatedParticipants = [...participants];//criando uma cópia do array participants usando o operador spread (...)\r\n    updatedParticipants.splice(index, 1);//remover um elemento do array updatedParticipants,splice() modifica o array original, removendo ou substituindo elementos O segundo parâmetro 1 indica que queremos remover apenas um elemento a partir do índice especificado.\r\n    setParticipants(updatedParticipants);//atualizando o array depois da modificação.\r\n  };\r\n\r\n  const handleSortParticipants = () => {\r\n    if (participants.length < 2) {\r\n      alert(\"É necessário pelo menos dois participantes para formar duplas\")\r\n    }\r\n    const shuffledParticipants = shuffleArray(participants);\r\n    const newPairs = [];\r\n  \r\n    for (let i = 0; i < shuffledParticipants.length; i += 2) {\r\n      if (i === shuffledParticipants.length - 1) {\r\n        newPairs.push([shuffledParticipants[i]]);\r\n      } else {\r\n        newPairs.push([shuffledParticipants[i], shuffledParticipants[i + 1]]);\r\n      }\r\n    }\r\n\r\n    onPairsGenerated(newPairs);\r\n  }\r\n\r\n  return (\r\n    <Limpeza>\r\n      <MainTittle>Calendário de Limpeza</MainTittle>\r\n      <DrawContainer>\r\n        <InName for=\"nome\">Insira o nome</InName>\r\n        <ContainerInputTxt>\r\n          <TxtInp\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id=\"nome\"\r\n            placeholder=\"Ex.: Brian\"\r\n            value={participantName}\r\n            onChange={(e) => setParticipantName(e.target.value)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === 'Enter') {\r\n                handleAddParticipant();\r\n              }\r\n            }}\r\n          />\r\n        </ContainerInputTxt>\r\n        <ContainerButtonAdd>\r\n          <ContentButtonAdd onClick={handleAddParticipant}>Adicionar</ContentButtonAdd>\r\n        </ContainerButtonAdd>\r\n      </DrawContainer>\r\n      <ContainerButtonSort>\r\n        <ListPartic>Lista de participantes</ListPartic>\r\n        <SortButton onClick={handleSortParticipants}>Sortear</SortButton>\r\n      </ContainerButtonSort>\r\n      <ContainerList>\r\n        <ScrollableContainerList>\r\n          {participants.map((participant, index) => (\r\n            <List key={index}>\r\n              {/* <span>&#8226;</span> */}\r\n              {participant}\r\n              <RemoveButton onClick={() => handleRemoveParticipant(index)}>X</RemoveButton>\r\n            </List>\r\n          ))}\r\n        </ScrollableContainerList>\r\n      </ContainerList>\r\n    </Limpeza>\r\n  );\r\n}\r\n\r\nexport default CleaningDay;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SACEC,OAAO,EAAEC,UAAU,EAAEC,aAAa,EAAEC,MAAM,EAAEC,iBAAiB,EAC7DC,MAAM,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,mBAAmB,EAC7EC,UAAU,EAAEC,aAAa,EAAEC,IAAI,EAAEC,YAAY,EAAEC,uBAAuB,QACjE,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,MAAMC,aAAa,GAAG,CAAC,GAAGD,KAAK,CAAC;EAChC,KAAK,IAAIE,CAAC,GAAGD,aAAa,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,aAAa,CAACC,CAAC,CAAC,EAAED,aAAa,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,aAAa,CAACG,CAAC,CAAC,EAAEH,aAAa,CAACC,CAAC,CAAC,CAAC;EAC7E;EACA,OAAOD,aAAa;AACtB;AAEA,SAASO,WAAWA,CAAC;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC,CAAC;EACrD,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC,CAAC;;EAE3D,MAAMkC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIF,eAAe,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAAC;MAClCJ,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEE,eAAe,CAAC,CAAC,CAAC;MACpDC,kBAAkB,CAAC,EAAE,CAAC,CAAC;IACzB;EACF,CAAC;EAED,MAAMG,uBAAuB,GAAIC,KAAK,IAAK;IAAC;IAC1C,MAAMC,mBAAmB,GAAG,CAAC,GAAGR,YAAY,CAAC,CAAC;IAC9CQ,mBAAmB,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC;IACrCN,eAAe,CAACO,mBAAmB,CAAC,CAAC;EACvC,CAAC;EAED,MAAME,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIV,YAAY,CAACR,MAAM,GAAG,CAAC,EAAE;MAC3BmB,KAAK,CAAC,+DAA+D,CAAC;IACxE;IACA,MAAMC,oBAAoB,GAAGxB,YAAY,CAACY,YAAY,CAAC;IACvD,MAAMa,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,oBAAoB,CAACpB,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvD,IAAIA,CAAC,KAAKqB,oBAAoB,CAACpB,MAAM,GAAG,CAAC,EAAE;QACzCqB,QAAQ,CAACC,IAAI,CAAC,CAACF,oBAAoB,CAACrB,CAAC,CAAC,CAAC,CAAC;MAC1C,CAAC,MAAM;QACLsB,QAAQ,CAACC,IAAI,CAAC,CAACF,oBAAoB,CAACrB,CAAC,CAAC,EAAEqB,oBAAoB,CAACrB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvE;IACF;IAEAO,gBAAgB,CAACe,QAAQ,CAAC;EAC5B,CAAC;EAED,oBACE1B,OAAA,CAAChB,OAAO;IAAA4C,QAAA,gBACN5B,OAAA,CAACf,UAAU;MAAA2C,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAC9ChC,OAAA,CAACd,aAAa;MAAA0C,QAAA,gBACZ5B,OAAA,CAACb,MAAM;QAAC8C,GAAG,EAAC,MAAM;QAAAL,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzChC,OAAA,CAACZ,iBAAiB;QAAAwC,QAAA,eAChB5B,OAAA,CAACX,MAAM;UACL6C,IAAI,EAAC,MAAM;UACXC,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,MAAM;UACTC,WAAW,EAAC,YAAY;UACxBC,KAAK,EAAEvB,eAAgB;UACvBwB,QAAQ,EAAGC,CAAC,IAAKxB,kBAAkB,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UACpDI,SAAS,EAAGF,CAAC,IAAK;YAChB,IAAIA,CAAC,CAACG,GAAG,KAAK,OAAO,EAAE;cACrB1B,oBAAoB,CAAC,CAAC;YACxB;UACF;QAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACe,CAAC,eACpBhC,OAAA,CAACV,kBAAkB;QAAAsC,QAAA,eACjB5B,OAAA,CAACT,gBAAgB;UAACqD,OAAO,EAAE3B,oBAAqB;UAAAW,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAChBhC,OAAA,CAACP,mBAAmB;MAAAmC,QAAA,gBAClB5B,OAAA,CAACR,UAAU;QAAAoC,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC/ChC,OAAA,CAACN,UAAU;QAACkD,OAAO,EAAErB,sBAAuB;QAAAK,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACtBhC,OAAA,CAACL,aAAa;MAAAiC,QAAA,eACZ5B,OAAA,CAACF,uBAAuB;QAAA8B,QAAA,EACrBf,YAAY,CAACgC,GAAG,CAAC,CAACC,WAAW,EAAE1B,KAAK,kBACnCpB,OAAA,CAACJ,IAAI;UAAAgC,QAAA,GAEFkB,WAAW,eACZ9C,OAAA,CAACH,YAAY;YAAC+C,OAAO,EAAEA,CAAA,KAAMzB,uBAAuB,CAACC,KAAK,CAAE;YAAAQ,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAAC;QAAA,GAHpEZ,KAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACqB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd;AAACpB,EAAA,CA7EQF,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AA+EpB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}